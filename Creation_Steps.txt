
Hello! This file contains project developing business logic description. It'll be update in each commit.

Application represents simplified social network contains components such as
    "online-chat",
    "private messages",
    "music"..and other components

To have deeper process understanding i decided to create REST application on JAVA EE "8" technology stack
    writing more logic-code and finding configuration troubleshooting solutions(from xml-based to annotation-based).

Deploying will be done by "Apache Tomcat " servlet container and in next steps it will transfered on glassfish web server.

Project dependencies will be described in "pom.xml" and deployment rules will be write in "web.xml" depl. descriptor

========================================================================================================================

STEP 1: Project structure and controller layer creating...

    Before start i create "log4j.properties" in "src/main/resources" to configure logger.

First of all i begin to describe "controller" submodule to have standart serverside functionality interaction. For example:
    -receiving clients requests by "FILTER CHAIN"(implemets "CHAIN OF RESPONSIBILITY" pattern),
     checking it on specific parameters(attributes) by current web filter filling request/response object
     with new attributes and forward/redirect them to appropriate servlet or pass it to the next filter chain element
     for next checking.

     (f81866)

                   |\
                   | \
===================|  \
                   |   \
I) CONTROLLER LAYER|   /
                   |  /
===================| /
                   |/


    1) All incoming requests will come to the first filter chain element - Session Filter - his task is checking
       incoming request on "opened-session" parameter and request mapping:

       I) In a case of nullable session and  "/login" or "/registration" mapping with GET-request method will forward
          request processing to same mapping-name html pages;

       II) In a case of nullable session and "/login" mapping but with POST-request method will forward processing to login servlet
           in which dao login logic will be performed and  new HttpSession will be opened with post redirecting to home page

    2)If session isn't null request processing will forward to the next filter chain element - NotNullSessionFilter -
      his main duty is to protect "login" and "register" pages from accessing by non-authorized users:

       I)If session isn't null and request mapping ends with "..login" or "..registration"  - request will be redirect
         to "userhome.html" pages
      II)If session isn't null and request mapping ends with "..userhome" - request processing will forward to userhome page.





       That process diagram you can see by path resources/info/controller-diagram



========================================================================================================================



                   |\
                   | \
                   |  \
===================|   \
                   |    \
II) DAO LAYER      |    /
                   |   /
===================|  /
                   | /
                   |/


    DAO-logic will give me opportunity to keep data  from requests and store and add data to the sending responses.
    On current step interaction between  "model.service" and  database will produced with a standart  java sql API
    to show my skill in using of default jdbc interaction-solutions but next commits jdbc-responsibilities will be shift
     to persistence-specification(..and it's realization) also like database connection will obtain through Conn.pool.

    So, to store data i need database(creation steps):
        1)create database;
        2)create tables:
            -CREATE TABLE users(
                id int (20) not null auto_increment,
                login varchar (15) unique not null,
                password char (20) not null,
                nickname char (15) not null,
                email char (25) not null,
                role varchar (5) not null,
                primary key (id)
                );

             -CREATE TABLE profiles(
                   id int (20),
                   user_nickname char (20) not null,
                   name varchar (15) not null,
                   surname varchar (20) not null,
                   age int (2),
                   gender varchar (6) not null,
                   country varchar (20),
                   primary key (user_nickname)
             );

              -ALTER TABLE profiles ADD CONSTRAINT FOREIGN KEY (user_nickname) references users (nickname);

              -CREATE USER


    I haven't found a more convenient way to connect to the database via jdbc than the connection pool..so i start to
     realize it here:

     I) Configure datasource:


     1)Adding to web.xml Data Source reference:
        <resource-ref>
                <description>DB Connection</description>
                <res-ref-name>jdbc/MyLocalDB</res-ref-name>
                <res-type>javax.sql.DataSource</res-type>
                <res-auth>Container</res-auth>
        </resource-ref>


         JNDI Data Source definition Application specific Configuration:
     2)Adding context.xml file to META-INF directory + Resource Link to server context "Tomcat/conf/context.xml"-file:
        <?xml version="1.0" encoding="UTF-8"?>
        <Context>
         <Resource
                 name="jdbc/MyLocalDB"
                 type="javax.sql.DataSource"
                 maxTotal="100" maxIdle="30"
                 maxWaitMillis="10000"
                 username="root" password="root"
                 driverClassName="com.mysql.cj.jdbc.Driver"
                 url="jdbc:mysql://localhost:3306/restwebDB">
         </Resource>
        </Context>

     3)UserDAO "registerNewUser"/"registerNewProfile"  methods describing:
        1)To register new User with values getting by servlets from "registration"/"registerprofile"-pages
            //todo:describe current part logic but...

            After last windows update MySQL Server became unavailaible and through 15 hours i decided to install
            postgreSQL service which gives me opportunity to relocate my DB-dump...












    







