
Hello! This file contains project developing business logic description. It'll be update in each commit.

Application represents simplified social network contains components such as
    "online-chat",
    "private messages",
    "music"..and other components

To have deeper process understanding i decided to create REST application on JAVA EE "8" technology stack
    writing more logic-code and finding configuration troubleshooting solutions(from xml-based to annotation-based).

Deploying will be done by "Apache Tomcat " servlet container and in next steps it will transfered on glassfish web server.

Project dependencies will be described in "pom.xml" and deployment rules will be write in "web.xml" depl. descriptor

========================================================================================================================

STEP 1: Project structure and controller layer creating...

    Before start i create "log4j.properties" in "src/main/resources" to configure logger.

First of all i begin to describe "controller" submodule to have standart serverside functionality interaction. For example:
    -receiving clients requests by "FILTER CHAIN"(implemets "CHAIN OF RESPONSIBILITY" pattern),
     checking it on specific parameters(attributes) by current web filter filling request/response object
     with new attributes and forward/redirect them to appropriate servlet or pass it to the next filter chain element
     for next checking.

     (f81866)

                   |\
                   | \
===================|  \
                   |   \
I) CONTROLLER LAYER|   /
                   |  /
===================| /
                   |/


      All incoming requests will come to Session Filter - his task is checking incoming request on "opened-session" parameter
      and in a case if:
                        1)Http-Session is not null;
                        -Http-Session contains "authStatus" attribute equals "authorized"
      pass request/response objects to the next filter-chain-element Login Page Filter where request uri checks to prevent
      users with an open session from accessing the login and registration pages and
      in a case if:
                        2)Request http-session  is not null;
                        -Request URI ends with a string "login"
       it will be redirected to "/userhome"-servlet GET-method which forward to "userhome.html"-page
       but in a case if:
                        3)Http-Session is not null;
                        -Http-Session contains "authStatus" and status attribute equals value "non authorized"
      session filter will forward request to Login-Servlet GET-method where request will be checked on:
                        4)Http-Session is null;
      and in a case if it's null:
                        -new session will be created;
                        -"authStatus" attribute value "non authorized" will be added to a new session attributes
                        which will be checked by Session-Filter each time client requests server(each request);
                        -forwarding request to "login.html" page for a next request processing(user credentials obtaining).
      as soon as:
                        5)login/password fields will be filled;
                        -<submit-button> will be pushed by user in "login.html" page
      POST-request containing request parameters(login/password will be sent to Apache Tomcat  and transferred it to the
       first filter-chain element - Session Filter already waiting incoming request to check(1);

       That process diagram you can see by path resources/info/controller-diagram



========================================================================================================================



                   |\
                   | \
                   |  \
===================|   \
                   |    \
II) DAO LAYER      |    /
                   |   /
===================|  /
                   | /
                   |/


    DAO-logic will give me opportunity to keep data  from requests and store and add data to the sending responses.
    On current step interaction between  "model.service" and  database will produced with a standart  java sql API
    to show my skill in using of standart jdbc interaction-solutions but next commits jdbc-responsibilities will be shift
     to persistence-specification(..and it's realization) also like database connection will obtain through Conn.pool.

    So, to store data i need database(creation steps):
        1)create database;
        2)create tables:
            -CREATE TABLE users(
                id int (20) not null auto_increment,
                login varchar (15) unique not null,
                password char (20) not null,
                nickname char (15) not null,
                email char (25) not null,
                role varchar (5) not null,
                primary key (id)
                );

             -CREATE TABLE profiles(
                   id int (20),
                   user_nickname char (20) not null,
                   name varchar (15) not null,
                   surname varchar (20) not null,
                   age int (2),
                   gender varchar (6) not null,
                   country varchar (20),
                   primary key (user_nickname)
             );


             -CREATE TABLE rdbms_users(
                user_nickname char (20) primary key,
                login varchar (15) unique not null,
                password char (20) not null,
                foreign key (user_nickname) references users (nickname)
                on delete cascade on update cascade
             );

              -ALTER TABLE profiles ADD CONSTRAINT FOREIGN KEY (user_nickname) references users (nickname);




    







