
Hello! This file contains project developing business logic description. It'll be update in each commit.

Application represents simplified social network contains components such as
    "online-chat",
    "private messages",
    "music"..and other components

To have deeper process understanding i decided to create REST application on JAVA EE "8" technology stack
    writing more logic-code and finding configuration troubleshooting solutions(from xml-based to annotation-based).

Deploying will be done by "Apache Tomcat " servlet container and in next steps it will transfered on glassfish web server.

Project dependencies will be described in "pom.xml" and deployment rules will be write in "web.xml" depl. descriptor

========================================================================================================================

STEP 1: Project structure and controller layer creating...

    Before start i create "log4j.properties" in "src/main/resources" to configure logger.

First of all i begin to describe "controller" submodule to have standart serverside functionality interaction. For example:
    -receiving clients requests by "FILTER CHAIN"(implemets "CHAIN OF RESPONSIBILITY" pattern),
     checking it on specific parameters(attributes) by current web filter filling request/response object
     with new attributes and forward/redirect them to appropriate servlet or pass it to the next filter chain element
     for next checking.

     (f81866)

                   |\
                   | \
===================|  \
                   |   \
I) CONTROLLER LAYER|   /
                   |  /
===================| /
                   |/


    1) All incoming requests will come to the first filter chain element - Session Filter - his task is checking
       incoming request on "opened-session" parameter and request mapping:

       I) In a case of nullable session and  "/login" or "/registration" mapping with GET-request method will forward
          request processing to same mapping-name html pages;

       II) In a case of nullable session and "/login" mapping but with POST-request method will forward processing to login servlet
           in which dao login logic will be performed and  new HttpSession will be opened with post redirecting to home page

    2)If session isn't null request processing will forward to the next filter chain element - NotNullSessionFilter -
      his main duty is to protect "login" and "register" pages from accessing by non-authorized users:

       I)If session isn't null and request mapping ends with "..login" or "..registration"  - request will be redirect
         to "userhome.html" pages
      II)If session isn't null and request mapping ends with "..userhome" - request processing will forward to userhome page.





       That process diagram you can see by path resources/info/controller-diagram



========================================================================================================================



                   |\
                   | \
                   |  \
===================|   \
                   |    \
II) DAO LAYER      |    /
                   |   /
===================|  /
                   | /
                   |/


    DAO-logic will give me opportunity to keep data  from requests and store and add data to the sending responses.
    On current step interaction between  "model.service" and  database will produced with a standart  java sql API
    to show my skill in using of default jdbc interaction-solutions but next commits jdbc-responsibilities will be shift
     to persistence-specification(..and it's realization) also like database connection will obtain through Conn.pool.

    So, to store data i need database(creation steps):
        1)create database;
        2)create tables:
            -CREATE TABLE users(
                id int (20) not null auto_increment,
                login varchar (15) unique not null,
                password char (20) not null,
                nickname char (15) not null,
                email char (25) not null,
                role varchar (5) not null,
                primary key (id)
                );

             -CREATE TABLE profiles(
                   id int (20),
                   user_nickname char (20) not null,
                   name varchar (15) not null,
                   surname varchar (20) not null,
                   age int (2),
                   gender varchar (6) not null,
                   country varchar (20),
                   primary key (user_nickname)
             );

              -ALTER TABLE profiles ADD CONSTRAINT FOREIGN KEY (user_nickname) references users (nickname);

              -CREATE USER


    I haven't found a more convenient way to connect to the database via jdbc than the connection pool..so i start to
     realize it here:

     I) Configure datasource:
     _________________________


     1)Adding to web.xml Data Source reference:
        <resource-ref>
                <description>DB Connection</description>
                <res-ref-name>jdbc/MyLocalDB</res-ref-name>
                <res-type>javax.sql.DataSource</res-type>
                <res-auth>Container</res-auth>
        </resource-ref>


         JNDI Data Source definition Application specific Configuration:
     2)Adding context.xml file to META-INF directory + Resource Link to server context "Tomcat/conf/context.xml"-file:
        <?xml version="1.0" encoding="UTF-8"?>
        <Context>
         <Resource
                 name="jdbc/MyLocalDB"
                 type="javax.sql.DataSource"
                 maxTotal="100" maxIdle="30"
                 maxWaitMillis="10000"
                 username="root" password="root"
                 driverClassName="com.mysql.cj.jdbc.Driver"
                 url="jdbc:mysql://localhost:3306/restwebDB">
         </Resource>
        </Context>




     II) Describing DML-methods of UserDAO class:
     ______________________________________________


      1)Describing  of RegisterServlet(POST-method)  and UserDAO(registerNewUser-method) interaction:

        -To register new User with values obtained  by servlets from same registration.html page  next steps will performed:

            Values will be use to initialize new user entity object which will use as argument in "dao.registerNewUser"- method
            after which execution same user entity object will be reinitialized...
                              ..in a case of success it will be initialized with same user-object values
                              ..in unsuccess case it will be initialized with value of null
            and then checking that user object checking on null will be performed and..
                               ..in case of (user != null) RegisterServlet will create new session with attribute("nickname")
                               which will be use in POST-method of ProfileRegistrationServlet
                               ..in case of (user == null..in case if user with same values are already exist) - current
                                 client will be redirect to LoginServlet(GET-method)
                                 GET-method from which request processing will be forward to "login.html"-page

      2)Describing  of ProfileRegisterServlet(POST-method) and UserDAO(registerNewProfile-method) interaction:

        -That step will perform only in success collective executing of upper-described methods(session creating and attrs setting):

            Current request session attribute "nickName"-value will and registerprofile-html page values will be used as
            arguments of UserDAO(registerNewProfile-method) which executing result(null-if profile values were not inserted ||
             new profile object, if profile values were successuflly added in restwebdb.profiles table) will use
            in next not null checking and..

                                ..in case of not null ->current session will be invalidated and  client will be redirect to LoginServlet(GET-method)
                                ..in null case -> client will be forward to "registerprofile.html-page"


          After success executing of 2 previous described steps new user and it's profile will be successfully created,
          hence(следовательно), that user can pass authentication described below..in step (3)

      3)Describing of LoginServlet(POST-method) and UserDAO(loginUser-method) interaction:
        -To execute UserDAO(loginUser-method) - LoginServlet(POST-method) will obtain @login and @password values from login.html page
         and insert them as arguments to UserDAO(login-method) inside whom will initialize(inside dao method)
         JsonObjects("user","profile","credentials") and add them into returnable  JsonArray-type array, which elements will use to..
                                ..initialize the object of the current user that is trying to log in and whose "get-name" method,
                                    when executed, will return a string representation of the current username, which is used further
                                    for checking current user avatar on exist in database table and in a true-case
                                        ->  set current user as session attribute
                                            or in case of false
                                        -> set current session attribute avatar-file_name with null value

                                ..use to set as session attributes for further  logic performing by appropriate servlets and filters


      4)Describing of UploadServlet and UserDAO(dao.uploadPhoto) interaction:
       -After successful authorization user will be redirected on "userhome.html"-page, where instead of the "avatar"
            of real user, the photo of "unknown user" will be displayed with 2 buttons "select"/"send" below it and in case if
            user is on "userhome.html" page and clicks on "select" button - a file selection window will open, upon further
            clicking on "send" button - "POST"-request, addressed to the "UploadServlet" servlet will be sent to the application
            server...
         After "POST" request received by application server and passed to "UploadServlet" servlet  -  upload servlet
            doPost method inside whom will realized UploadServlet class "doPost" method and UserDAO  class "uploadPhoto" method interaction

        -User photo uploading from "userhome.html" and it's further writing to pre created package and file of the uploaded photo
            will be performed by UPLOADSERVLET, and file name of this photo will be inserted to "restwebdb.avatars" table
            by UserDAO class (uploadPhoto-method):

         -The way to upload file from html i selected is "Multipart-File-Uploading" so in "userhome.html" page
            form attribute "enchtype" will be "multipart/form-data" <--- encoding type which give opportunity to send files
            without special encoding and with absence of necessity(отстутс. необх-ти) to additional decode performing..
            So the servlet will be tagged with @MultipartConfig annotation(on current moment without inside params) and
            during it's performing:
                        +User class object will be initialized with parsed session "user" attribute which represents as Json Element;

                        +On file system way "E:\\restweb\\src\\main\\webapp\\dynamic\\images\\avatars\\" will be create new package
                        with a name of appropriate user Nickname(curUserNickname*)

                        +On file system way "E:\\restweb\\src\\main\\webapp\\dynamic\\images\\avatars\\curUserNickname\\

                        +using an object of class Part, the uploaded file will be received (in the form of a Part object),
                          and then based on the directory created in the previous step for the current user avatar and the name
                          of the uploaded file, an object of the File class (argument to OutputStream) will be initialized.

                        +using the Files class, an EMPTY file will be created in the file system with uploadable file name.

                        +InputStream will be received from the previously created Part object

                        +Recording from BufferedInputStream with parameter of InputStream received from previously created Part object
                         to BufferedOutputStream with parameter of OutputStream containing File object and representing empty file
                         earlier created in file system

         -After successfully uploading the photo file, UploadServlet will redirect the current user request to the resource
          whose URI ends with "/ home" and then after intercepting with a one of filter chain elements it will be forward to "home.html" page
          on which instead of "unknown user" -  uploaded avatar will shown.


        5)Describing of LoginServlet(doPost-method) and UserDAO(getUserAvatar) interaction:
          -dao.getUserAvatar will be used by LoginServlet to set the file name contained in table "restwebdb.avatars"
           as a session attribute to redirect the user to the "home.jsp" (not "userhome.html") page where using the scriptlet
           the previously uploaded avatar will be shown.



                   |\
                   | \
                   |  \
===================|   \
                   |    \
III) FILTER CHAIN  |    /
                   |   /
===================|  /
                   | /
                   |/


-           //todo: Describing of Filter Chain..
-           //todo: Describing of Chat connecting


OMG... about 4 week i had practice with element's visual  disposition and design using css, learn how to write js-scripts to
  make them 'alive' and i can really say  - "result will be at least unsusual" maybe even unique :D"
  (had to try a lot of my child code, but now my understanding of that questions gives me opportunity to go forward )..

  ohhh..i'm really forget to describe all here, but all will be here, maximal soon

  also, i could try to deploy all that on Jelastic and Jenkins..fail..but understanding of it's work has been obtained
  and vere very soon it will be work









































    







